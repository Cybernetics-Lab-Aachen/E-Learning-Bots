import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.TimeZone;

import org.json.JSONObject;

import com.mysql.jdbc.PreparedStatement;

public class Test {
	public static void main(String[] args) throws ClassNotFoundException, SQLException, IOException {

		Class.forName("com.mysql.jdbc.Driver");
		Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo", "root", "");
		Statement statement = connection.createStatement();

		/*
		 * String sql = "INSERT INTO test" + "VALUES (100, 'Zara', 'Ali', 18)";
		 * statement.executeUpdate(sql);
		 */

		int a = 0;
		// source attributes
		String sourceURL = "";
		String language = "";
		// entities attributes
		String[] entity = new String[7];
		// keywords attributes
		String[] keywords = new String[3];
		// concepts
		String[] concepts = new String[4];
		// source
		JSONObject json = new JSONObject(
				"{\"status\": \"OK\",  \"usage\": \"By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html\",  \"totalTransactions\": \"3\",  \"language\": \"english\",  \"keywords\": [    {      \"emotions\": {        \"anger\": \"0.262422\",        \"disgust\": \"0.226572\",        \"fear\": \"0.205061\",        \"joy\": \"0.064551\",        \"sadness\": \"0.340171\"      },      \"relevance\": \"0.945317\",      \"sentiment\": {        \"type\": \"neutral\"      },      \"text\": \"eponymous language-analysis API\"    },    {      \"emotions\": {        \"anger\": \"0.171026\",        \"disgust\": \"0.142805\",        \"fear\": \"0.141956\",        \"joy\": \"0.268368\",        \"sadness\": \"0.207304\"      },      \"relevance\": \"0.813724\",      \"sentiment\": {        \"type\": \"neutral\"      },      \"text\": \"Elliot Turner\"    },    {      \"emotions\": {        \"anger\": \"0.167065\",        \"disgust\": \"0.066725\",        \"fear\": \"0.22903\",        \"joy\": \"0.152748\",        \"sadness\": \"0.352858\"      },      \"relevance\": \"0.602751\",      \"sentiment\": {        \"score\": \"0.514657\",        \"type\": \"positive\"      },      \"text\": \"immediate traction\"    },    {      \"emotions\": {        \"anger\": \"0.249591\",        \"disgust\": \"0.500736\",        \"fear\": \"0.032693\",        \"joy\": \"0.020096\",        \"sadness\": \"0.358605\"      },      \"relevance\": \"0.514458\",      \"sentiment\": {        \"score\": \"0.414453\",        \"type\": \"positive\"      },      \"text\": \"actionable data\"    },    {      \"emotions\": {        \"anger\": \"0.140581\",        \"disgust\": \"0.153186\",        \"fear\": \"0.066355\",        \"joy\": \"0.231934\",        \"sadness\": \"0.331839\"      },      \"relevance\": \"0.513592\",      \"sentiment\": {        \"type\": \"neutral\"      },      \"text\": \"growth rate\"    },    {      \"emotions\": {        \"anger\": \"0.23408\",        \"disgust\": \"0.079816\",        \"fear\": \"0.101573\",        \"joy\": \"0.053313\",        \"sadness\": \"0.586452\"      },      \"relevance\": \"0.507699\",      \"sentiment\": {        \"type\": \"neutral\"      },      \"text\": \"PR Newswire\"    },    {      \"emotions\": {        \"anger\": \"0.089007\",        \"disgust\": \"0.024462\",        \"fear\": \"0.140545\",        \"joy\": \"0.458103\",        \"sadness\": \"0.144596\"      },      \"relevance\": \"0.503233\",      \"sentiment\": {        \"score\": \"0.415642\",        \"type\": \"positive\"      },      \"text\": \"new hires\"    },    {      \"emotions\": {        \"anger\": \"0.124306\",        \"disgust\": \"0.348984\",        \"fear\": \"0.27706\",        \"joy\": \"0.145566\",        \"sadness\": \"0.139676\"      },      \"relevance\": \"0.487688\",      \"sentiment\": {        \"score\": \"-0.308911\",        \"type\": \"negative\"      },      \"text\": \"square feet\"    },    {      \"emotions\": {        \"anger\": \"0.069737\",        \"disgust\": \"0.316008\",        \"fear\": \"0.036278\",        \"joy\": \"0.334303\",        \"sadness\": \"0.159554\"      },      \"relevance\": \"0.477935\",      \"sentiment\": {        \"score\": \"0.551042\",        \"type\": \"positive\"      },      \"text\": \"news organization\"    },    {      \"emotions\": {        \"anger\": \"0.249591\",        \"disgust\": \"0.500736\",        \"fear\": \"0.032693\",        \"joy\": \"0.020096\",        \"sadness\": \"0.358605\"      },      \"relevance\": \"0.476057\",      \"sentiment\": {        \"score\": \"0.414453\",        \"type\": \"positive\"      },      \"text\": \"human language\"    },    {      \"emotions\": {        \"anger\": \"0.249591\",        \"disgust\": \"0.500736\",        \"fear\": \"0.032693\",        \"joy\": \"0.020096\",        \"sadness\": \"0.358605\"      },      \"relevance\": \"0.474641\",      \"sentiment\": {        \"score\": \"0.414453\",        \"type\": \"positive\"      },      \"text\": \"web pages\"    },    {      \"relevance\": \"0.47095\",      \"sentiment\": {        \"type\": \"neutral\"      },      \"text\": \"new iPhone.\"    },    {      \"emotions\": {        \"anger\": \"0.317156\",        \"disgust\": \"0.030394\",        \"fear\": \"0.205849\",        \"joy\": \"0.284465\",        \"sadness\": \"0.090513\"      },      \"relevance\": \"0.468916\",      \"sentiment\": {        \"type\": \"neutral\"      },      \"text\": \"new markets\"    },    {      \"emotions\": {        \"anger\": \"0.23408\",        \"disgust\": \"0.079816\",        \"fear\": \"0.101573\",        \"joy\": \"0.053313\",        \"sadness\": \"0.586452\"      },      \"relevance\": \"0.465049\",      \"sentiment\": {        \"type\": \"neutral\"      },      \"text\": \"advertising networks\"    },    {      \"emotions\": {        \"anger\": \"0.23408\",        \"disgust\": \"0.079816\",        \"fear\": \"0.101573\",        \"joy\": \"0.053313\",        \"sadness\": \"0.586452\"      },      \"relevance\": \"0.44982\",      \"sentiment\": {        \"type\": \"neutral\"      },      \"text\": \"numerous publishers\"    },    {      \"emotions\": {        \"anger\": \"0.213441\",        \"disgust\": \"0.153347\",        \"fear\": \"0.103002\",        \"joy\": \"0.031412\",        \"sadness\": \"0.592101\"      },      \"relevance\": \"0.253164\",      \"sentiment\": {        \"type\": \"neutral\"      },      \"text\": \"transactions\"    },    {      \"emotions\": {        \"anger\": \"0.171227\",        \"disgust\": \"0.131477\",        \"fear\": \"0.172706\",        \"joy\": \"0.172181\",        \"sadness\": \"0.321531\"      },      \"relevance\": \"0.236224\",      \"sentiment\": {        \"score\": \"0.372075\",      },      \"text\": \"nuances\"    },    {      \"emotions\": {        \"anger\": \"0.171227\",        \"disgust\": \"0.131477\",        \"fear\": \"0.172706\",        \"sadness\": \"0.321531\"      },      \"relevance\": \"0.230063\",      \"sentiment\": {        \"score\": \"0.372075\",        \"type\": \"positive\"      },      \"text\": \"quirks\"    },    {      \"emotions\": {        \"anger\": \"0.126138\",        \"disgust\": \"0.036673\",        \"fear\": \"0.077543\",        \"sadness\": \"0.17884\"      },      \"relevance\": \"0.220551\",      \"sentiment\": {        \"type\": \"neutral\"      },      \"text\": \"Walmart\"    }  ]}");
		if (json.toString().contains("url")) {
			sourceURL = json.get("url").toString();
		} else {
			sourceURL = "";
		}
		if (json.toString().contains("language")) {
			language = json.get("language").toString();
		} else {
			language = "";
		}
		// entities
		if (json.toString().contains("entities")) {
			String ent = json.get("entities").toString();
			if (ent.contains("[]")) {
				entity[a] = "";
				a++;
				entity[a] = "";
				a++;
				entity[a] = "";
				a++;
				entity[a] = "";
				a++;
				entity[a] = "0";
				a++;
				entity[a] = "";
				a++;
				entity[a] = "0";
				a++;
			} else {
				if (ent.startsWith("[") && ent.endsWith("]")) {
					ent = ent.substring(1, ent.length() - 1);
				}
				String[] entArray = ent.split("(},\\{)");
				if (entArray.length > 1) {
					entArray[0] = entArray[0] + "}";
					entArray[entArray.length - 1] = "{" + entArray[entArray.length - 1];
					for (int i = 1; i < entArray.length - 1; i++) {
						entArray[i] = "{" + entArray[i] + "}";
					}
				}
				entity = new String[entArray.length * 7];
				for (int i = 0; i < entArray.length; i++) {
					JSONObject entities = new JSONObject(entArray[i]);
					if (entities.toString().contains("type")) {
						entity[a] = entities.getString("type");
					} else {
						entity[a] = "";
					}
					a++;

					if (entities.toString().contains("relevance")) {
						entity[a] = "" + entities.getDouble("relevance");
					} else {
						entity[a] = "0";
					}
					a++;
					if (entities.toString().contains("sentiment")) {
						String entSentiment = entities.get("sentiment").toString();
						JSONObject entitiesSentiment = new JSONObject(entSentiment);
						if (entitiesSentiment.toString().contains("type")) {
							String entSentType = entitiesSentiment.get("type").toString();
							if (entSentType != "neutral" && entitiesSentiment.toString().contains("score")) {
								entity[a] = "" + entitiesSentiment.getDouble("score");
							} else {
								entity[a] = "0";
							}
						} else {
							entity[a] = "0";
						}
						a++;
					} else {
						entity[a] = "0";
						a++;
					}
					if (entities.toString().contains("count")) {
						entity[a] = "" + entities.getInt("count");
					} else {
						entity[a] = "0";
					}
					a++;
					if (entities.toString().contains("text")) {
						entity[a] = entities.getString("text");
					} else {
						entity[a] = "";
					}
					a++;
					if (entities.toString().contains("disambiguated")) {
						String entLink = entities.get("disambiguated").toString();
						JSONObject entLinks = new JSONObject(entLink);
						if (entLinks.toString().contains("website")) {
							entity[a] = entLinks.getString("website");
						} else {
							entity[a] = "";
						}
						a++;
						if (entLinks.toString().contains("dbpedia")) {
							entity[a] = entLinks.getString("dbpedia");
						} else {
							entity[a] = "";
						}
						a++;
					} else {
						entity[a] = "";
						a++;
						entity[a] = "";
						a++;
					}
				}
			}
		} else {
			entity[a] = "";
			a++;
			entity[a] = "";
			a++;
			entity[a] = "";
			a++;
			entity[a] = "";
			a++;
			entity[a] = "0";
			a++;
			entity[a] = "";
			a++;
			entity[a] = "0";
			a++;
		}
		// keywords
		a = 0;
		if (json.toString().contains("keywords")) {
			String key = json.get("keywords").toString();
			if (key.contains("[]")) {
				keywords[a] = "";
				a++;
				keywords[a] = "";
				a++;
				keywords[a] = "0";
				a++;
				keywords[a] = "" + -10;
				a++;
				keywords[a] = "" + -10;
				a++;
				keywords[a] = "" + -10;
				a++;
				keywords[a] = "" + -10;
				a++;
				keywords[a] = "" + -10;
				a++;
			} else {
				key = key.substring(1, key.length() - 1);
				String[] keyArray = key.split("(},\\{)");
				if (keyArray.length > 1) {
					keyArray[0] = keyArray[0] + "}";
					keyArray[keyArray.length - 1] = "{" + keyArray[keyArray.length - 1];
					for (int i = 1; i < keyArray.length - 1; i++) {
						keyArray[i] = "{" + keyArray[i] + "}";
					}
				}
				keywords = new String[keyArray.length * 8];
				for (int i = 0; i < keyArray.length; i++) {
					JSONObject keyword = new JSONObject(keyArray[i]);
					if (keyword.toString().contains("relevance")) {
						keywords[a] = keyword.getString("relevance");
					} else {
						keywords[a] = "0";
					}
					JSONObject keySentiment = new JSONObject(keyword.get("sentiment").toString());
					a++;
					if (keySentiment.toString().contains("score")) {
						keywords[a] = keySentiment.getString("score");
					} else {
						keywords[a] = "0";
					}
					a++;
					if (keyword.toString().contains("text")) {
						keywords[a] = keyword.getString("text");
					} else {
						keywords[a] = "";
					}
					a++;
					if(keyword.toString().contains("emotions")){
						String emotion = keyword.get("emotions").toString();
						JSONObject emotions = new JSONObject(emotion);
						if(emotion.contains("anger")){
							keywords[a] = emotions.getString("anger");
						}else{
							keywords[a] = "" + -10;
						}
						a++;
						if(emotion.contains("disgust")){
							keywords[a] = emotions.getString("disgust");
						}else{
							keywords[a] = "" + -10;
						}
						a++;
						if(emotion.contains("fear")){
							keywords[a] = emotions.getString("fear");
						}else{
							keywords[a] = "" + -10;
						}
						a++;
						if(emotion.contains("joy")){
							keywords[a] = emotions.getString("joy");
						}else{
							keywords[a] = "" + -10;
						}
						a++;
						if(emotion.contains("sadness")){
							keywords[a] = emotions.getString("sadness");
						}else{
							keywords[a] = "" + -10;
						}
						a++;
					}else{
						keywords[a] = "" + -10;
						a++;
						keywords[a] = "" + -10;
						a++;
						keywords[a] = "" + -10;
						a++;
						keywords[a] = "" + -10;
						a++;
						keywords[a] = "" + -10;
						a++;
					}
				}
			}
		} else {
			keywords[a] = "0";
			a++;
			keywords[a] = "0";
			a++;
			keywords[a] = "";
			a++;
			keywords[a] = "" + -10;
			a++;
			keywords[a] = "" + -10;
			a++;
			keywords[a] = "" + -10;
			a++;
			keywords[a] = "" + -10;
			a++;
			keywords[a] = "" + -10;
			a++;
		}
		// concepts
		a = 0;
		if (json.toString().contains("concepts")) {
			String con = json.get("concepts").toString();
			if (con.contains("[]")) {
				concepts[a] = "";
				a++;
				concepts[a] = "";
				a++;
				concepts[a] = "";
				a++;
				concepts[a] = "";
				a++;
			} else {
				con = con.substring(1, con.length() - 1);
				String[] conArray = con.split("(},\\{)");
				if (conArray.length > 1) {
					conArray[0] = conArray[0] + "}";
					conArray[conArray.length - 1] = "{" + conArray[conArray.length - 1];
					for (int i = 1; i < conArray.length - 1; i++) {
						conArray[i] = "{" + conArray[i] + "}";
					}
				}
				concepts = new String[conArray.length * 4];
				for (int i = 0; i < conArray.length; i++) {

					JSONObject concept = new JSONObject(conArray[i]);
					if (concept.toString().contains("text")) {
						concepts[a] = concept.getString("text");
					} else {
						concepts[a] = "";
					}
					a++;
					if (concept.toString().contains("relevance")) {
						concepts[a] = concept.getString("relevance");
					} else {
						concepts[a] = "0";
					}
					a++;
					if (concept.toString().contains("website")) {
						concepts[a] = concept.getString("website");
					} else {
						concepts[a] = "";
					}
					a++;
					if (concept.toString().contains("dbpedia")) {
						concepts[a] = concept.getString("dbpedia");
					} else {
						concepts[a] = "";
					}
					a++;
				}
			}
		} else {
			concepts[a] = "";
			a++;
			concepts[a] = "0";
			a++;
			concepts[a] = "";
			a++;
			concepts[a] = "";
			a++;
		}

		for (int i = 0; i < concepts.length; i++) {
			System.out.println(concepts[i]);
		}
		for (int i = 0; i < entity.length; i++) {
			System.out.println(entity[i]);
		}
		for (int i = 0; i < keywords.length; i++) {
			System.out.println(keywords[i]);
		}

		SimpleDateFormat timeFormat = new SimpleDateFormat("yyyyMMdd_HHmmss");
		timeFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
		String lastVisit = "";
		lastVisit = timeFormat.format(Calendar.getInstance().getTime());
		String c = lastVisit.substring(4, 6);
		int nextTime = Integer.parseInt(c) + 1;
		String nextVisit = "";
		if (nextTime == 13) {
			c = lastVisit.substring(0, 4);
			nextTime = Integer.parseInt(c) + 1;
			nextVisit = lastVisit.substring(6, 8) + ".01." + nextTime;
		} else {
			nextVisit = lastVisit.substring(6, 8) + "." + nextTime + "." + lastVisit.substring(0, 4);
		}
		lastVisit = lastVisit.substring(6, 8) + "." + lastVisit.substring(4, 6) + "." + lastVisit.substring(0, 4);
		System.out.println(nextVisit);

		PreparedStatement sql = (PreparedStatement) connection
				.prepareStatement("INSERT INTO sources (url, language, lastVisit, nextVisit)" + " VALUES (?,?,?,?)");
		sql.setString(1, sourceURL);
		sql.setString(2, language);
		sql.setString(3, lastVisit);
		sql.setString(4, nextVisit);
		sql.executeUpdate();
		System.out.println("Updated sources");
		for (int i = 0; i < concepts.length;) {
			if (concepts[1] != "") {
				sql = (PreparedStatement) connection.prepareStatement(
						"INSERT INTO concepts (text, relevance, website_Link, dbpedia_Link)" + " VALUES (?,?,?,?)");
				sql.setString(1, concepts[i]);
				i++;
				sql.setDouble(2, Double.parseDouble(concepts[i]));
				i++;
				sql.setString(3, concepts[i]);
				i++;
				sql.setString(4, concepts[i]);
				i++;
				sql.executeUpdate();
				System.out.println("Updated concepts");
			} else {
				i = 4;
			}
		}
		for (int i = 0; i < keywords.length;) {
			if (keywords[0] != "" && keywords[1] != "") {
				sql = (PreparedStatement) connection
						.prepareStatement("INSERT INTO keywords (relevance, sentiment, text, anger, disgust, fear, joy, sadness)" + " VALUES (?,?,?,?,?,?,?,?)");
				sql.setDouble(1, Double.parseDouble(keywords[i]));
				i++;
				sql.setDouble(2, Double.parseDouble(keywords[i]));
				i++;
				sql.setString(3, keywords[i]);
				i++;
				sql.setDouble(4, Double.parseDouble(keywords[i]));
				i++;
				sql.setDouble(5, Double.parseDouble(keywords[i]));
				i++;
				sql.setDouble(6, Double.parseDouble(keywords[i]));
				i++;
				sql.setDouble(7, Double.parseDouble(keywords[i]));
				i++;
				sql.setDouble(8, Double.parseDouble(keywords[i]));
				i++;
				sql.executeUpdate();
				System.out.println("Updated keywords");
			} else {
				i = 3;
			}
		}
		for (int i = 0; i < entity.length;) {
			if (entity[1] != "" && entity[2] != "" && entity[3] != "") {
				sql = (PreparedStatement) connection.prepareStatement(
						"INSERT INTO entities (type, relevance, sentiment, count, text, website_Link, dbpedia_Link)"
								+ " VALUES (?,?,?,?,?,?,?)");
				sql.setString(1, entity[i]);
				i++;
				sql.setDouble(2, Double.parseDouble(entity[i]));
				i++;
				sql.setDouble(3, Double.parseDouble(entity[i]));
				i++;
				sql.setInt(4, Integer.parseInt(entity[i]));
				i++;
				sql.setString(5, entity[i]);
				i++;
				sql.setString(6, entity[i]);
				i++;
				sql.setString(7, entity[i]);
				i++;
				sql.executeUpdate();
				System.out.println("Updated entity");
			} else {
				i = 7;
			}
		}
	}

	static String readFile(String path, Charset encoding) throws IOException {
		byte[] encoded = Files.readAllBytes(Paths.get(path));
		return new String(encoded, encoding);
	}
}
